// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id
  firstname             String
  lastname              String
  email                 String
  profilepicture        String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  bio                   String?
  post                  Post[]
  receivedNotifications Notifications[] @relation("Recipient")
  issuedNotifications   Notifications[] @relation("Issuer")
  comments              Comment[]
  Likes                 Like[]
}

model Post {
  id               String @id @default(uuid())
  title            String
  smalldescription String
  content          Json

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())
  linkedNotifications Notifications[]
  comments            Comment[]
  Likes               Like[]
}

model Notifications {
  id          String           @id @default(uuid())
  recipientId String
  recepient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuserId   String
  issueUser   User             @relation("Issuer", fields: [issuserId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id])
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

enum NotificationType {
  COMMENT
  LIKE
}
